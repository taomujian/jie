from Crypto.PublicKey import RSA
import gmpy2
from Crypto.Util.number import *
 
 
with open('flag.enc','rb')as f:
    c=bytes_to_long(f.read())
    print(c)
c=2485360255306619684345131431867350432205477625621366642887752720125176463993839766742234027524
with open('public.pem','rb')as f:
    f1=f.read()
    con=RSA.importKey(f1)
n=con.n
e=con.e
 
print(n,e)
print(gmpy2.iroot(n,3)[1])
for i in range(0,100000):
    c+=i*n
    if gmpy2.iroot(c,3)[1]:
        print(long_to_bytes(gmpy2.iroot(c,3)[0]))
 
p1=26440615366395242196516853423447
p2=27038194053540661979045656526063
p3=32581479300404876772405716877547
phi=(p1-1)*(p2-1)*(p3-1)
 
n=23292710978670380403641273270002884747060006568046290011918413375473934024039715180540887338067
e=3
 
 
#sagemath
n=26440615366395242196516853423447
c=2485360255306619684345131431867350432205477625621366642887752720125176463993839766742234027524
m=c%n
PR.<x> = PolynomialRing(Zmod(n))
f = x^3-m
x0 = f.roots()
print(x0)
 
 
 
n=27038194053540661979045656526063
c=2485360255306619684345131431867350432205477625621366642887752720125176463993839766742234027524
m=c%n
PR.<x> = PolynomialRing(Zmod(n))
f = x^3-m
x0 = f.roots()
print(x0)
 
 
n=32581479300404876772405716877547
c=2485360255306619684345131431867350432205477625621366642887752720125176463993839766742234027524
m=c%n
PR.<x> = PolynomialRing(Zmod(n))
f = x^3-m
x0 = f.roots()
print(x0)
 
def crt(p1,p2,p3,m1, m2, m3):
    sum=0
    sum=m1*p2*p3*gmpy2.invert(p2*p3,p1)+m2*p1*p3*gmpy2.invert(p1*p3,p2)+m3*p1*p2*gmpy2.invert(p1*p2,p3)
    return(sum%n)
 
 
 
a=[13374868592866626517389128266735,7379361747422713811654086477766,5686385026105901867473638678946]
b=[19616973567618515464515107624812]
c=[13404203109409336045283549715377,13028011585706956936052628027629,6149264605288583791069539134541]
 
for x in a:
    for y in b:
        for z in c:
            m = crt(p1,p2,p3,x, y, z)
            m=long_to_bytes(m)
            if b'ctf{' in m:
                print(m)
                break