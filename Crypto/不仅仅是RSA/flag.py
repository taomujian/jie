import gmpy2
from Crypto.PublicKey import RSA
from Crypto.Util.number import *

# 解析第一个公钥
with open("附件/pubkey1.pem", "rb") as f:
    key = RSA.importKey(f.read())

n1 = key.n
e1 = key.e

print('N1=', n1)
print('E1=', e1)

# 解析第二个公钥
with open("附件/pubkey2.pem", "rb") as f:
    key = RSA.importKey(f.read())

n2 = key.n
e2 = key.e

print('N2=', n2)
print('E2=', e2)

# 给出已知的 p 和 q 值
p1 = 95652716952085928904432251307911783641637100214166105912784767390061832540987
q1 = 107527961531806336468215094056447603422487078704170855072884726273308088647617

p2 = 89485735722023752007114986095340626130070550475022132484632643785292683293897
q2 = 95652716952085928904432251307911783641637100214166105912784767390061832540987

phi1 = (p1 - 1) * (q1 - 1)
phi2 = (p2 - 1) * (q2 - 1)

# 密文和解密
c1 = 4314251881242803343641258350847424240197348270934376293792054938860756265727535163218661012756264314717591117355736219880127534927494986120542485721347351
c2 = 485162209351525800948941613977942416744737316759516157292410960531475083863663017229882430859161458909478412418639172249660818299099618143918080867132349

d1 = gmpy2.invert(e1, phi1)
d2 = gmpy2.invert(e2, phi2)

m1 = gmpy2.powmod(c1, d1, n1)
m2 = gmpy2.powmod(c2, d2, n2)

print(bytes.fromhex(hex(m1)[2:]).decode('utf-8'))
print(bytes.fromhex(hex(m2)[2:]).decode('utf-8'))
