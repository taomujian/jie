import sys
from Crypto.Util.number import *
from Crypto.PublicKey import RSA
from Crypto.Cipher import AES,PKCS1_OAEP


def decrypt(private_key, ciphertext):
  """Decrypt a message with a given private key.

  Takes in a private_key generated by Crypto.PublicKey.RSA, which must be of
  size exactly 4096

  If the ciphertext is invalid, return None
  """
  if len(ciphertext) < 512 + 16:
    return None
  msg_header = ciphertext[:512]
  msg_iv = ciphertext[512:512+16]
  msg_body = ciphertext[512+16:]
  try:
    symmetric_key = PKCS1_OAEP.new(private_key).decrypt(msg_header)
  except ValueError:
    return None
  if len(symmetric_key) != 32:
    return None
  return AES.new(symmetric_key,
      mode=AES.MODE_CFB,
      IV=msg_iv).decrypt(msg_body)

if __name__ == "__main__":
    k_text = open(sys.argv[1], 'r').read()
    c = open(sys.argv[2], 'rb').read()
    k = RSA.importKey(k_text)
    print(decrypt(k, c).decode())