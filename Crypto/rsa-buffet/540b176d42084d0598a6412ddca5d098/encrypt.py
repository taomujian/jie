import random
from Crypto.Cipher import AES,PKCS1_OAEP
from Crypto.PublicKey import RSA

def get_rand_bytes(length):
  return "".join([chr(random.randrange(256)) for i in range(length)])

def encrypt(public_key, message):
  """Encrypt a message with a given public key.
  
  Takes in a public_key generated by Crypto.PublicKey.RSA, which must be of
  size exactly 4096
  """
  symmetric_key = get_rand_bytes(32)
  msg_header = PKCS1_OAEP.new(public_key).encrypt(symmetric_key)
  assert len(msg_header) == 512
  msg_iv = get_rand_bytes(16)
  msg_body = AES.new(symmetric_key,
      mode=AES.MODE_CFB,
      IV=msg_iv).encrypt(message)
  return msg_header + msg_iv + msg_body

def decrypt(private_key, ciphertext):
  """Decrypt a message with a given private key.

  Takes in a private_key generated by Crypto.PublicKey.RSA, which must be of
  size exactly 4096

  If the ciphertext is invalid, return None
  """
  if len(ciphertext) < 512 + 16:
    return None
  msg_header = ciphertext[:512]
  msg_iv = ciphertext[512:512+16]
  msg_body = ciphertext[512+16:]
  try:
    symmetric_key = PKCS1_OAEP.new(private_key).decrypt(msg_header)
  except ValueError:
    return None
  if len(symmetric_key) != 32:
    return None
  return AES.new(symmetric_key,
      mode=AES.MODE_CFB,
      IV=msg_iv).decrypt(msg_body)


if __name__=="__main__":
  # Test!
  message = "This is my test message.  It's kind of ssilly.wireheirhgwieruhgwieurghwiregsilly.wireheirhgwieruhgwieurghwiregsilly.wireheirhgwieruhgwieurghwiregsilly.wireheirhgwieruhgwieurghwiregsilly.wireheirhgwieruhgwieurghwiregsilly.wireheirhgwieruhgwieurghwiregsilly.wireheirhgwieruhgwieurghwiregsilly.wireheirhgwieruhgwieurghwiregsilly.wireheirhgwieruhgwieurghwiregsilly.wireheirhgwieruhgwieurghwiregsilly.wireheirhgwieruhgwieurghwiregilly.wireheirhgwieruhgwieurghwireg"
  private_key = RSA.generate(4096)
  public_key = private_key.publickey()
  ciphertext = encrypt(public_key, message)
  assert message == decrypt(private_key, ciphertext)

