n = 0x73cec712124b33c0294e01eb52e8c3cd2fe9ddbcbf457b3b950360063dfae42cbbe9855bd986bcfea0948fadfb252f5e2ff3c982ff47afb6596a496636f1fc5ecfe9f5db7620b23fe9e30d230aa9299ab9a78bfb5e0630fd1149259b2b2104ea65d2e27b89785e4bf01d0594d9f94575cbcc3383f63c5aabe4d5b48eb761cce3ab21689b3f3155b5f15efee240d5ac11cee2acbd019de7c06f607ea618b5cd735b5a6972d2b446a12ff58cf8314822fa5ea09d0963acd00441b2a1b37aca01d7f39052927db98a0bd5ca1c49a7ad67923e3aac30ecd33cc8b4b30a40cdb3acc721ee5da53a02977cee959affe672a668525eb78df96af0a14f4ac04fab68efa8eabe9535e1064a5fc2ff7cac9520210311db0c3bf91101bc55a67a81e4f69364c724ee6ad6bdc301df642c9392e9befa4ff0d65481adb6feac251cd207044587da9710809700246cb3c63e659a97249f5e7418568e37db2fb2c1115e719d6682bb2e89b4e23d40ba4c532f289e10e0b89a5647c486a09b9e376844171b229d74f871004d4945a702a391a04ac704f43809e972891e6ab33b3c0f03f0b6f9ae005b26be6e647a1865c727277423f59a595187ffbfea13501e23b6b57ef115eaa6febcb207a3112628652a39578847241c33989e84607b0f683b30ddf773348b07360b063d9120a397809591ca18a04cd32ad9cbfe0494ed3ae8d2c5b43fdb51cbL
p_fake =0xc9c18c5bc8ca981badeaf82992ea66f77858a323cfd384f9ccb9de51ba027630e4a5472d9328ee97be4c42af5594b385910f879a0bd54984f1bb66e85eb10917fd192f94d1ec2714ee8c6bd44615da6cc8a312b2e82a7c7c3999aabf887df80ecee929a23cf5a407f672e9dca6390e0dc3758fc940cd250daedf5e79880e75270083dfbab0846c1cc153be6e7737e8ed994490ad71ccfa06644d979e97e896145122fc9cd682369f3073221a2d822758a96ea399cb67ceb9f11ef2db881974b55234d749dcde0841ef254423ef41cbaaf1b58de43120e623edddfaf35dbc24216849f0d388800149cad287fc4f6e92925b9fbcbbbf2d9bd1019841c117311ea1

pbits = 2048
kbits = 900
pbar = p_fake & (2^pbits-2^kbits)  
print ("upper %d bits (of %d bits) is given" % (pbits-kbits, pbits))
   
PR.<x> = PolynomialRing(Zmod(n))  
f = x + pbar
   
x0 = f.small_roots(X=2^kbits, beta=0.4)[0]  # find root < 2^kbits with factor >= n^0.3
p = int(x0 + pbar)
print('p = ',p)